name: Security Scanning

on:
  schedule:
    # Run weekly on Monday at 2:00 AM
    - cron: '0 2 * * 1'
  workflow_dispatch: # Allow manual triggering

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: myapp
  IMAGE_TAG: latest
  REPORTS_DIR: ./reports/security
  APP_URL: http://sample-app:8080

jobs:
  scan-container:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Pull latest image
      run: |
        docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

    - name: Run Trivy vulnerability scanner
      run: |
        mkdir -p ${{ env.REPORTS_DIR }}
        trivy image --format json --output ${{ env.REPORTS_DIR }}/trivy-results.json ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        trivy image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: ${{ env.REPORTS_DIR }}/trivy-results.json

  run-zap-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Run ZAP Scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: ${{ env.APP_URL }}
        rules_file_name: 'zap-rules.conf'
        cmd_options: '-a'
        allow_issue_writing: false

    - name: Move ZAP results
      run: |
        mkdir -p ${{ env.REPORTS_DIR }}
        mv zap-full-scan-report.html ${{ env.REPORTS_DIR }}/zap-security-report.html
        cat zap-full-scan.json > ${{ env.REPORTS_DIR }}/zap-results.json

    - name: Upload ZAP scan results
      uses: actions/upload-artifact@v4
      with:
        name: zap-results
        path: ${{ env.REPORTS_DIR }}

  sonarqube-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
      
    - name: SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        cd sample-app
        # Ensure URL has proper scheme
        if [[ ! "$SONAR_HOST_URL" =~ ^https?:// ]]; then
          SONAR_HOST_URL="http://$SONAR_HOST_URL"
        fi
        mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.token=$SONAR_TOKEN

    - name: Upload SonarQube results
      run: |
        mkdir -p ${{ env.REPORTS_DIR }}
        curl -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=${{ github.repository }}&types=VULNERABILITY&ps=500" > ${{ env.REPORTS_DIR }}/sonarqube-vulnerabilities.json
        curl -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/hotspots/search?projectKey=${{ github.repository }}&ps=500" > ${{ env.REPORTS_DIR }}/sonarqube-hotspots.json

    - name: Upload SonarQube scan results
      uses: actions/upload-artifact@v4
      with:
        name: sonarqube-results
        path: ${{ env.REPORTS_DIR }}/*sonarqube*.json

  generate-security-dashboard:
    runs-on: ubuntu-latest
    needs: [scan-container, run-zap-scan, sonarqube-scan]
    steps:
    - uses: actions/checkout@v3

    - name: Download all scan results
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create reports directory
      run: |
        mkdir -p ${{ env.REPORTS_DIR }}
        if [ -f ./artifacts/trivy-results/trivy-results.json ]; then
          cp ./artifacts/trivy-results/trivy-results.json ${{ env.REPORTS_DIR }}/
        fi
        if [ -f ./artifacts/zap-results/zap-results.json ]; then
          cp ./artifacts/zap-results/zap-results.json ${{ env.REPORTS_DIR }}/
        fi
        if [ -f ./artifacts/zap-results/zap-security-report.html ]; then
          cp ./artifacts/zap-results/zap-security-report.html ${{ env.REPORTS_DIR }}/
        fi
        if [ -f ./artifacts/sonarqube-results/sonarqube-vulnerabilities.json ]; then
          cp ./artifacts/sonarqube-results/sonarqube-vulnerabilities.json ${{ env.REPORTS_DIR }}/
        fi
        if [ -f ./artifacts/sonarqube-results/sonarqube-hotspots.json ]; then
          cp ./artifacts/sonarqube-results/sonarqube-hotspots.json ${{ env.REPORTS_DIR }}/
        fi

    - name: Generate Security Reports
      run: |
        chmod +x jenkins/security-reports.sh
        export SONAR_URL=${{ secrets.SONAR_HOST_URL }}
        # Ensure URL has proper scheme
        if [[ ! "$SONAR_URL" =~ ^https?:// ]]; then
          SONAR_URL="http://$SONAR_URL"
        fi
        export SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}
        export PROJECT_KEY=${{ github.repository }}
        export TRIVY_REPORT=${{ env.REPORTS_DIR }}/trivy-results.json
        export OUTPUT_DIR=${{ env.REPORTS_DIR }}
        export IMAGE_NAME=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        export APP_URL=${{ env.APP_URL }}
        export ZAP_REPORT=${{ env.REPORTS_DIR }}/zap-results.json
        ./jenkins/security-reports.sh

    - name: Upload Security Dashboard
      uses: actions/upload-artifact@v4
      with:
        name: security-dashboard
        path: ${{ env.REPORTS_DIR }}

    - name: Create GitHub Security Issue If High Vulnerabilities
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const trivyResults = JSON.parse(fs.readFileSync('${{ env.REPORTS_DIR }}/trivy-results.json', 'utf8'));
            
            // Check if there are any high or critical vulnerabilities
            let highVulns = [];
            if (trivyResults.Results && trivyResults.Results.length > 0) {
              trivyResults.Results.forEach(result => {
                if (result.Vulnerabilities) {
                  const critical = result.Vulnerabilities.filter(v => v.Severity === 'CRITICAL');
                  const high = result.Vulnerabilities.filter(v => v.Severity === 'HIGH');
                  highVulns = [...highVulns, ...critical, ...high];
                }
              });
            }
            
            if (highVulns.length > 0) {
              // Create an issue
              const issueTitle = 'Security Alert: High/Critical Vulnerabilities Detected';
              const highVulnList = highVulns.map(v => `- ${v.VulnerabilityID}: ${v.Title} in ${v.PkgName} ${v.InstalledVersion}`).join('\n');
              
              const issueBody = `
              ## Security Scan Results
              
              The weekly security scan has detected ${highVulns.length} high or critical vulnerabilities:
              
              ${highVulnList}
              
              ### Recommended Actions
              1. Review the full security dashboard in the workflow artifacts
              2. Update the affected packages to their latest versions
              3. Run a new scan to verify the fixes
              
              This issue was automatically created by the Security Scanning workflow.
              `;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['security', 'vulnerability']
              });
              
              console.log('Security issue created due to high vulnerabilities');
            } else {
              console.log('No high vulnerabilities found, no issue created');
            }
          } catch (error) {
            console.error('Error processing security results:', error);
          } 