name: CI/CD Pipeline with Security Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: myapp
  IMAGE_TAG: ${{ github.run_number }}
  REPORTS_DIR: ./reports/security

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: |
        cd sample-app
        mvn clean package

    - name: Run tests
      run: |
        cd sample-app
        mvn test

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: sample-app/target/surefire-reports/*.xml

  sonarqube-analysis:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
      
    - name: SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        cd sample-app
        mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.token=$SONAR_TOKEN
        mkdir -p ${{ env.REPORTS_DIR }}
        
  docker-build-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - uses: actions/checkout@v3

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: test-results
        path: sample-app/target/surefire-reports

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./sample-app
        push: false
        tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        load: true

    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

    - name: Run Trivy vulnerability scanner
      run: |
        mkdir -p ${{ env.REPORTS_DIR }}
        trivy image --format json --output ${{ env.REPORTS_DIR }}/trivy-results.json ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        trivy image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: ${{ env.REPORTS_DIR }}/trivy-results.json

  dast-with-zap:
    runs-on: ubuntu-latest
    needs: docker-build-scan

    steps:
    - uses: actions/checkout@v3

    - name: Start application container
      run: |
        docker run -d -p 8080:8080 --name myapp ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        sleep 20 # Wait for the application to start

    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:8080'
        rules_file_name: 'zap-rules.conf'
        cmd_options: '-I'

    - name: Move ZAP results
      run: |
        mkdir -p ${{ env.REPORTS_DIR }}
        mv zap-baseline-report.html ${{ env.REPORTS_DIR }}/zap-security-report.html
        cat zap-baseline-report.json > ${{ env.REPORTS_DIR }}/zap-results.json

    - name: Upload ZAP scan results
      uses: actions/upload-artifact@v4
      with:
        name: zap-results
        path: ${{ env.REPORTS_DIR }}

  generate-security-dashboard:
    runs-on: ubuntu-latest
    needs: [sonarqube-analysis, docker-build-scan, dast-with-zap]

    steps:
    - uses: actions/checkout@v3

    - name: Download all scan results
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Create reports directory
      run: |
        mkdir -p ${{ env.REPORTS_DIR }}
        if [ -f ./artifacts/trivy-results/trivy-results.json ]; then
          cp ./artifacts/trivy-results/trivy-results.json ${{ env.REPORTS_DIR }}/
        fi
        if [ -f ./artifacts/zap-results/zap-results.json ]; then
          cp ./artifacts/zap-results/zap-results.json ${{ env.REPORTS_DIR }}/
        fi
        if [ -f ./artifacts/zap-results/zap-security-report.html ]; then
          cp ./artifacts/zap-results/zap-security-report.html ${{ env.REPORTS_DIR }}/
        fi

    - name: Generate Security Reports
      run: |
        chmod +x jenkins/security-reports.sh
        export SONAR_URL=${{ secrets.SONAR_HOST_URL }}
        export SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}
        export PROJECT_KEY=${{ github.repository }}
        export TRIVY_REPORT=${{ env.REPORTS_DIR }}/trivy-results.json
        export OUTPUT_DIR=${{ env.REPORTS_DIR }}
        export IMAGE_NAME=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        export APP_URL=http://localhost:8080
        export ZAP_REPORT=${{ env.REPORTS_DIR }}/zap-results.json
        ./jenkins/security-reports.sh

    - name: Upload Security Dashboard
      uses: actions/upload-artifact@v4
      with:
        name: security-dashboard
        path: ${{ env.REPORTS_DIR }}

  deploy:
    runs-on: ubuntu-latest
    needs: generate-security-dashboard
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./sample-app
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Set up Kubectl
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}

    - name: Deploy to Kubernetes
      run: |
        sed -i "s|{{IMAGE_TAG}}|${{ env.IMAGE_TAG }}|g" kubernetes/deployment.yaml
        kubectl apply -f kubernetes/deployment.yaml
        kubectl apply -f kubernetes/service.yaml 