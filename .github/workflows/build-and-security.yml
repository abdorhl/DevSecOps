name: CI/CD Pipeline with Security Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: myapp
  IMAGE_TAG: ${{ github.run_number }}
  REPORTS_DIR: ./reports/security

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: |
        cd sample-app
        mvn clean package

    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: sample-app/target/*.jar

    - name: Run tests
      run: |
        cd sample-app
        mvn test

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: sample-app/target/surefire-reports/*.xml

  sonarqube-analysis:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
      
    - name: SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        cd sample-app
        # Ensure URL has proper scheme
        if [[ ! "$SONAR_HOST_URL" =~ ^https?:// ]]; then
          SONAR_HOST_URL="http://$SONAR_HOST_URL"
        fi
        mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.token=$SONAR_TOKEN
        mkdir -p ${{ env.REPORTS_DIR }}
        
  docker-build-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - uses: actions/checkout@v3

    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: sample-app/target/surefire-reports

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: sample-app/target/

    - name: Prepare for Docker build
      run: |
        echo "Preparing for Docker build..."
        mkdir -p ./sample-app/target
        find sample-app/target -name "*.jar" -exec cp {} ./sample-app/target/ \;
        ls -la ./sample-app/target/
        ls -la ./sample-app/

    - name: Check Dockerfile
      run: |
        echo "Checking Dockerfile contents..."
        cat sample-app/Dockerfile

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver: docker

    - name: Build Docker image
      run: |
        echo "Building Docker image myapp:${{ env.IMAGE_TAG }}"
        cd sample-app
        # Build with verbose output
        docker build --no-cache --progress=plain -t myapp:${{ env.IMAGE_TAG }} .
        echo "Listing Docker images after build..."
        docker images

    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

    - name: Run Trivy vulnerability scanner
      run: |
        mkdir -p ${{ env.REPORTS_DIR }}
        trivy image --format json --output ${{ env.REPORTS_DIR }}/trivy-results.json ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        trivy image ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: ${{ env.REPORTS_DIR }}/trivy-results.json

  dast-with-zap:
    runs-on: ubuntu-latest
    needs: docker-build-scan

    steps:
    - uses: actions/checkout@v3

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: sample-app/target/

    - name: Prepare for Docker build
      run: |
        echo "Preparing for Docker build..."
        mkdir -p ./sample-app/target
        ls -la ./sample-app/target/
        find sample-app/target -name "*.jar" -type f | head -1 | xargs -I {} cp {} ./sample-app/target/app.jar
        ls -la ./sample-app/target/
        ls -la ./sample-app/

    - name: Build Docker image directly
      run: |
        cd sample-app
        echo "Dockerfile content:"
        cat Dockerfile
        echo "Building image directly..."
        docker build -t myapp:${{ env.IMAGE_TAG }} .
        echo "Docker images after build:"
        docker images

    - name: Start application container
      run: |
        echo "Starting application container..."
        echo "Available Docker images:"
        docker images
        echo "Attempting to run container with image myapp:${{ env.IMAGE_TAG }}"
        docker run -d -p 8080:8080 --name myapp myapp:${{ env.IMAGE_TAG }}
        echo "Running containers:"
        docker ps -a
        echo "Container logs:"
        docker logs myapp || echo "Failed to get logs"
        echo "Waiting for application to start..."
        sleep 20 # Wait for the application to start

    - name: Create ZAP rules file
      run: |
        # Create a basic ZAP rules file
        cat > zap-rules.conf << 'EOF'
        # zap-baseline rule configuration file
        # Only scan for passive alerts to speed up the scan
        10015	IGNORE	Incomplete or No Cache-control Header Set
        10038	IGNORE	Content Security Policy Header Not Set
        10054	IGNORE	Cookie without SameSite Attribute
        10055	IGNORE	CSP Scanner
        10049	IGNORE	Storable and Cacheable Content
        EOF
        ls -la
        cat zap-rules.conf

    - name: ZAP Scan
      run: |
        # Pull ZAP Docker image from GitHub Container Registry
        docker pull ghcr.io/zaproxy/zaproxy:stable
        
        # Create output directory with proper permissions
        mkdir -p zap-output
        chmod 777 zap-output
        
        # Run ZAP scan
        docker run --network="host" \
          -v "$(pwd)/zap-rules.conf:/zap/wrk/zap-rules.conf:ro" \
          -v "$(pwd)/zap-output:/zap/wrk:rw" \
          --name zap \
          ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
          -t http://localhost:8080 \
          -c zap-rules.conf \
          -I \
          -r baseline-report.html \
          -J baseline-report.json \
          || echo "ZAP scan completed with alerts"
        
        # Check if report files were generated and copy them to expected locations
        ls -la zap-output/
        cp zap-output/baseline-report.html zap-baseline-report.html || echo "HTML report not found"
        cp zap-output/baseline-report.json zap-baseline-report.json || echo "JSON report not found"
        
        # Create basic reports if they don't exist
        if [ ! -f "zap-baseline-report.html" ]; then
          echo "<html><body><h1>ZAP Scan Results</h1><p>Scan completed with issues. See logs for details.</p></body></html>" > zap-baseline-report.html
        fi
        
        if [ ! -f "zap-baseline-report.json" ]; then
          echo '{"site":"localhost:8080","scanDate":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","alerts":[]}' > zap-baseline-report.json
        fi
        
        ls -la zap-baseline-report.*

    - name: Move ZAP results
      run: |
        mkdir -p ${{ env.REPORTS_DIR }}
        # Copy ZAP reports to the reports directory
        cp zap-baseline-report.html ${{ env.REPORTS_DIR }}/zap-security-report.html || echo "Failed to copy HTML report"
        
        # Create JSON report if needed
        if [ -f "zap-baseline-report.json" ]; then
          cat zap-baseline-report.json > ${{ env.REPORTS_DIR }}/zap-results.json
        else
          echo '{"site":"localhost:8080","scanDate":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","alerts":[]}' > ${{ env.REPORTS_DIR }}/zap-results.json
          echo "Created default ZAP JSON report"
        fi
        
        # List the report files
        ls -la ${{ env.REPORTS_DIR }}/

    - name: Upload ZAP scan results
      uses: actions/upload-artifact@v4
      with:
        name: zap-results
        path: ${{ env.REPORTS_DIR }}

  generate-security-dashboard:
    runs-on: ubuntu-latest
    needs: [sonarqube-analysis, docker-build-scan, dast-with-zap]

    steps:
    - uses: actions/checkout@v3

    - name: Download all scan results
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create reports directory
      run: |
        mkdir -p ${{ env.REPORTS_DIR }}
        if [ -f ./artifacts/trivy-results/trivy-results.json ]; then
          cp ./artifacts/trivy-results/trivy-results.json ${{ env.REPORTS_DIR }}/
        fi
        if [ -f ./artifacts/zap-results/zap-results.json ]; then
          cp ./artifacts/zap-results/zap-results.json ${{ env.REPORTS_DIR }}/
        fi
        if [ -f ./artifacts/zap-results/zap-security-report.html ]; then
          cp ./artifacts/zap-results/zap-security-report.html ${{ env.REPORTS_DIR }}/
        fi

    - name: Generate Security Reports
      run: |
        chmod +x jenkins/security-reports.sh
        export SONAR_URL=${{ secrets.SONAR_HOST_URL }}
        # Ensure URL has proper scheme
        if [[ ! "$SONAR_URL" =~ ^https?:// ]]; then
          SONAR_URL="http://$SONAR_URL"
        fi
        export SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}
        export PROJECT_KEY=${{ github.repository }}
        export TRIVY_REPORT=${{ env.REPORTS_DIR }}/trivy-results.json
        export OUTPUT_DIR=${{ env.REPORTS_DIR }}
        export IMAGE_NAME=${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        export APP_URL=http://localhost:8080
        export ZAP_REPORT=${{ env.REPORTS_DIR }}/zap-results.json
        ./jenkins/security-reports.sh

    - name: Upload Security Dashboard
      uses: actions/upload-artifact@v4
      with:
        name: security-dashboard
        path: ${{ env.REPORTS_DIR }}

  deploy:
    runs-on: ubuntu-latest
    needs: generate-security-dashboard
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./sample-app
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Set up Kubectl
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}

    - name: Deploy to Kubernetes
      run: |
        sed -i "s|{{IMAGE_TAG}}|${{ env.IMAGE_TAG }}|g" kubernetes/deployment.yaml
        kubectl apply -f kubernetes/deployment.yaml
        kubectl apply -f kubernetes/service.yaml 